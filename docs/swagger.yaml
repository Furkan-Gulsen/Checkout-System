definitions:
  dto.CategoryRequest:
    properties:
      name:
        type: string
    type: object
  dto.ItemCreateRequest:
    properties:
      categoryId:
        type: integer
      itemType:
        $ref: '#/definitions/entity.ItemType'
      price:
        type: number
      quantity:
        type: integer
      sellerId:
        type: integer
    type: object
  dto.PromotionRequest:
    properties:
      categoryPromotion:
        $ref: '#/definitions/entity.CategoryPromotionDiscount'
      promotionType:
        type: integer
      sameSellerPromotion:
        $ref: '#/definitions/entity.SameSellerPromotionDiscount'
      totalPricePromotions:
        items:
          $ref: '#/definitions/entity.TotalPricePromotionDiscount'
        type: array
    type: object
  dto.VasItemCreateRequest:
    properties:
      categoryId:
        type: integer
      itemId:
        type: integer
      price:
        type: number
      quantity:
        type: integer
      sellerId:
        type: integer
    type: object
  entity.Category:
    properties:
      id:
        type: integer
      name:
        type: string
    required:
    - name
    type: object
  entity.CategoryPromotionDiscount:
    properties:
      categoryID:
        type: integer
      discountRate:
        maximum: 100
        minimum: 0
        type: number
    required:
    - categoryID
    - discountRate
    type: object
  entity.Item:
    properties:
      cartId:
        type: integer
      categoryId:
        type: integer
      id:
        type: integer
      itemType:
        allOf:
        - $ref: '#/definitions/entity.ItemType'
        enum:
        - 1
        - 2
      price:
        type: number
      quantity:
        maximum: 10
        type: integer
      sellerId:
        type: integer
    required:
    - cartId
    - categoryId
    - price
    - quantity
    - sellerId
    type: object
  entity.ItemType:
    enum:
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - DigitalItem
    - DefaultItem
  entity.Promotion:
    properties:
      categoryPromotion:
        $ref: '#/definitions/entity.CategoryPromotionDiscount'
      id:
        type: integer
      promotionType:
        allOf:
        - $ref: '#/definitions/entity.PromotionType'
        enum:
        - 1
        - 2
        - 3
      sameSellerPromotion:
        $ref: '#/definitions/entity.SameSellerPromotionDiscount'
      totalPricePromotions:
        items:
          $ref: '#/definitions/entity.TotalPricePromotionDiscount'
        type: array
    required:
    - promotionType
    type: object
  entity.PromotionType:
    enum:
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - SameSellerPromotion
    - CategoryPromotion
    - TotalPricePromotion
  entity.SameSellerPromotionDiscount:
    properties:
      discountRate:
        maximum: 100
        minimum: 0
        type: number
    required:
    - discountRate
    type: object
  entity.TotalPricePromotionDiscount:
    properties:
      discountAmount:
        type: number
      priceRangeEnd:
        type: number
      priceRangeStart:
        type: number
    required:
    - discountAmount
    - priceRangeEnd
    - priceRangeStart
    type: object
  entity.VasItem:
    properties:
      categoryId:
        type: integer
      id:
        type: integer
      itemId:
        type: integer
      price:
        type: number
      quantity:
        maximum: 3
        minimum: 1
        type: integer
      sellerId:
        type: integer
    required:
    - categoryId
    - itemId
    - price
    - quantity
    - sellerId
    type: object
info:
  contact: {}
paths:
  /api/v1/cart/{cartId}:
    delete:
      consumes:
      - application/json
      description: Reset a cart
      parameters:
      - description: Cart ID
        in: path
        name: cartId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Cart reset successfully
          schema:
            type: string
      summary: Reset cart
      tags:
      - Cart
    get:
      consumes:
      - application/json
      description: Display a cart
      parameters:
      - description: Cart ID
        in: path
        name: cartId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Cart displayed successfully
          schema:
            type: string
      summary: Display cart
      tags:
      - Cart
  /api/v1/cart/{cartId}/item:
    post:
      consumes:
      - application/json
      description: Add an item to a cart
      parameters:
      - description: Cart ID
        in: path
        name: cartId
        required: true
        type: integer
      - description: Item
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/dto.ItemCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Item added successfully
          schema:
            type: string
      summary: Add item
      tags:
      - Cart
  /api/v1/cart/{cartId}/item/{itemId}/vas-item/{vasItemId}:
    post:
      consumes:
      - application/json
      description: Add a vas item to a cart
      parameters:
      - description: VasItem
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/dto.VasItemCreateRequest'
      produces:
      - application/json
      responses: {}
      summary: Add vas item
      tags:
      - Cart
  /api/v1/cart/{cartId}/promotion/{promotionId}:
    post:
      consumes:
      - application/json
      description: Apply a promotion to a cart
      parameters:
      - description: Cart ID
        in: path
        name: cartId
        required: true
        type: integer
      - description: Promotion ID
        in: path
        name: promotionId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Promotion applied successfully
          schema:
            type: string
        "409":
          description: Promotion already applied
          schema:
            type: string
      summary: Apply promotion
      tags:
      - Cart
  /api/v1/cart/item/{itemId}:
    delete:
      consumes:
      - application/json
      description: Remove an item from a cart
      parameters:
      - description: Item ID
        in: path
        name: itemId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Item removed successfully
          schema:
            type: string
      summary: Remove Item from cart
      tags:
      - Cart
  /api/v1/cart/vas-item/{vasItemId}:
    delete:
      consumes:
      - application/json
      description: Remove a vas item from a cart
      parameters:
      - description: Vas Item ID
        in: path
        name: vasItemId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Vas item removed successfully
          schema:
            type: string
      summary: Remove vas item from cart
      tags:
      - Cart
  /api/v1/category:
    post:
      consumes:
      - application/json
      description: Create a new category
      parameters:
      - description: Category object
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/dto.CategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Create a category
      tags:
      - Category
  /api/v1/category/{id}:
    get:
      description: Get a category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Get a category by ID
      tags:
      - Category
  /api/v1/category/list:
    get:
      description: Get a list of categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Category'
            type: array
      summary: List categories
      tags:
      - Category
  /api/v1/item/{id}:
    get:
      consumes:
      - application/json
      description: Get an item by its ID
      parameters:
      - description: Item ID
        format: int
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get an item by ID
      tags:
      - Item
  /api/v1/item/list:
    get:
      description: Get a list of items
      parameters:
      - description: Cart ID
        format: int
        in: query
        name: cart_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Item'
            type: array
      summary: List items
      tags:
      - Item
  /api/v1/promotion:
    post:
      consumes:
      - application/json
      description: Create a new promotion
      parameters:
      - description: Promotion object
        in: body
        name: promotion
        required: true
        schema:
          $ref: '#/definitions/dto.PromotionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Promotion created successfully
          schema:
            type: string
      summary: Create a promotion
      tags:
      - Promotion
  /api/v1/promotion/{id}:
    get:
      description: Get a promotion by its ID
      parameters:
      - description: Promotion ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Get a promotion by ID
      tags:
      - Promotion
  /api/v1/promotion/list:
    get:
      description: Get a list of promotions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Promotion'
            type: array
      summary: List promotions
      tags:
      - Promotion
  /api/v1/vasitem/{id}:
    get:
      description: Get a vas item
      parameters:
      - description: Vas Item ID
        format: int
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.VasItem'
            type: array
      summary: Get vas item
      tags:
      - VasItem
  /api/v1/vasitem/list:
    get:
      description: Get a list of vas items
      parameters:
      - description: Item ID
        format: int
        in: query
        name: item_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.VasItem'
            type: array
      summary: List vas items
      tags:
      - VasItem
swagger: "2.0"
